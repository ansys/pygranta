[{"objectID":"User guide","href":"user_guide.html#user-guide","title":"User guide","text":"User guide\n\nThe pygranta metapackage itself is not used directly. Instead, it provides a bundle of\nPyGranta packages that are compatible with each other and with a given Granta MI release.\n\nThe user guide for each PyGranta package provides usage information specific to that package."},{"objectID":"User guide","href":"user_guide.html#pygranta-user-guides","title":"User guide > PyGranta user guides","text":"PyGranta user guides\n\nPyGranta BoM Analytics  \n\nhttps://bomanalytics.grantami.docs.pyansys.com/version/stable/user_guide/index.html\n\nPyGranta RecordLists \n\nhttps://recordlists.grantami.docs.pyansys.com/version/stable/user_guide/index.html\n\nPyGranta JobQueue \n\nhttps://jobqueue.grantami.docs.pyansys.com/version/stable/user_guide/index.html\n\nPyGranta Data Flow Extensions \n\nhttps://dataflow-extensions.grantami.docs.pyansys.com/version/stable/user_guide/index.html"},{"objectID":"API reference","href":"api.html#api-reference","title":"API reference","text":"API reference\n\nThe pygranta metapackage does not have an API. The only information that you can\nobtain specific to this package is the version.\n\nTo obtain the metapackage version, use this code:\n\nEach PyGranta package has its own “API reference” documentation section."},{"objectID":"API reference","href":"api.html#pygranta-api-documentation","title":"API reference > PyGranta API documentation","text":"PyGranta API documentation\n\nPyGranta BoM Analytics  \n\nhttps://bomanalytics.grantami.docs.pyansys.com/version/stable/api/index.html\n\nPyGranta RecordLists \n\nhttps://recordlists.grantami.docs.pyansys.com/version/stable/api/index.html\n\nPyGranta JobQueue \n\nhttps://jobqueue.grantami.docs.pyansys.com/version/stable/api/index.html\n\nPyGranta Data Flow Extensions \n\nhttps://dataflow-extensions.grantami.docs.pyansys.com/version/stable/api/index.html"},{"objectID":"Development and release processes","href":"development_and_release_processes.html#development-and-release-processes","title":"Development and release processes","text":"Development and release processes"},{"objectID":"Development and release processes","href":"development_and_release_processes.html#definitions","title":"Development and release processes > Definitions","text":"Definitions\n\nPyGranta meta-package: A package which depends on the idiomatic packages and auto-generated packages. Includes\ndocumentation describing the PyGranta ecosystem, including this document.\n\nIdiomatic package: A hand-written package. Typically depends on one auto-generated package and openapi-common.\nThere are currently three idiomatic packages in PyGranta:\n\nansys-grantami-bomanalytics\n\nansys-grantami-recordlists\n\nansys-grantami-jobqueue\n\nAuto-generated package: A package generated by the codegen template. There are currently two auto-generated\npackages in PyGranta:\n\nansys-grantami-bomanalytics-openapi\n\nansys-grantami-serverapi-openapi\n\nCodegen template: The template used to generate the auto-generated packages.\n\nProduction test VM: A virtual machine used as part of CI. A new Production test VM is commissioned for each new\nGranta MI release, and the VM is only upgraded if a service pack is made available for that release. It is used as\npart of idiomatic package CI during development and release to ensure compatibility with a specific version of\nGranta MI.\n\nDevelopment test VM: Virtual machine used as part of CI. This machine is upgraded as required during development.\nIt is used as part of idiomatic package CI during development only to ensure compatibility with development\nbuilds of Granta MI."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#development-and-release-timeline","title":"Development and release processes > Development and release timeline","text":"Development and release timeline\n\nThe timeline is split into three distinct phases:\n\nPhase 1: Development. There is active development upstream on closed-source Granta MI components, the codegen\ntemplate, and on the open source idiomatic packages and auto-generated packages. Effort is made to ensure CI is\npassing on all main branches, but from time to time CI may fail. The development test VM is upgraded as\nrequired to support CI passing on main branches.\n\nPhase 2: Hardening. Bugs are fixed and minor improvements are made to idiomatic packages, auto-generated\npackages, and the codegen template. During this phase the codegen template and auto-generated packages are\nfinalized.\n\nPhase 3: Pre-release. The upstream closed-source development has completed. The PyGranta meta-package and\nidiomatic packages are manually tested and finalized."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-1-development","title":"Development and release processes > Phase 1: Development","text":"Phase 1: Development\n\nDuring development, the following processes happen continuously:\n\nIncorporate changes to upstream API definitions into auto-generated package repositories.\n\nCheck that code generation is successful by monitoring CI in the auto-generated package repositories.\n\nIf code generation is not successful, resolve by either fixing the codegen template, fixing the auto-generated\npackage configuration, or raise the issue with the internal Ansys development team.\n\nIf idiomatic package development does not depend on upstream API development, then there is no dependency between\nthe idiomatic package and the auto-generated package and work can proceed in parallel.\n\nIf significant idiomatic package development is being done that depends on the current state of an auto-generated\npackage, you should update the main branch of the corresponding idiomatic package to depend on the\nauto-generated package main directly.\n\nDuring this phase, the development test VM may be upgraded if required to support new upstream Granta MI capabilities."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-2-hardening","title":"Development and release processes > Phase 2: Hardening","text":"Phase 2: Hardening"},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-2a-initial-dev-releases","title":"Development and release processes > Phase 2a: Initial dev releases","text":"Phase 2a: Initial dev releases\n\nUpdate the development test VM with the latest Granta MI software and databases. See the\nansys-grantami-bomanalytics repository for details about preparing the Restricted Substances test database.\n\nPublish auto-generated packages to the internal PyPI mirror with .dev version numbers.\n\nUpdate idiomatic package main branches to depend on the auto-generated package .dev releases. If the\nmain branch has not been updated to depend on the auto-generated package main branch during development,\nthen there may be integration issues discovered at this point - these should be resolved in the PR before merging.\nThe PR typically includes:\n\nUpdates to Python version support to align with changes to the auto-generated package.\n\nUpdates to the README.rst to reflect any changes in the minimum required Granta MI version.\n\nChanges at the interface with the auto-generated package if either the codegen template or API definition has\nchanged.\n\nChanges to expected test results. This is typically relevant for ansys-grantami-bomanalytics which includes\nacceptance-style tests.\n\nPublish idiomatic packages to the internal PyPI mirror with .dev version numbers.\n\nAt this point release branches should not be created. .dev releases should be published to the internal\nPyPI mirror from the main branch.\n\nThese .dev releases can be used for internal testing of closed-source packages that have runtime\ndependencies on PyGranta packages.\n\nContinue to review any changes to API definitions via auto-generated packages throughout the hardening phase. If\nthere are any issues with the API definitions, these must be escalated with high priority."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-2b-documentation-review","title":"Development and release processes > Phase 2b: Documentation review","text":"Phase 2b: Documentation review\n\nReview the documentation for all idiomatic packages and the PyGranta meta-package:\n\nSignificant new documentation is reviewed by the appropriate reviews for linguistic and technical accuracy.\n\nReferences to dependencies are updated, including:\n\nServer software versions\n\nRequired Python versions\n\nCompatible third-party library versions\n\nReferences to Ansys documentation of other packages/products are checked to see if they need to be updated to the\nprevious version of that documentation.\n\nThe Ansys documentation for the current in-development release is published after the PyGranta packages are\nreleased. The documentation for the previous release should be used to ensure links in published PyGranta\ndocumentation can always be resolved."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-2c-release-candidates","title":"Development and release processes > Phase 2c: Release candidates","text":"Phase 2c: Release candidates\n\nTowards the end of the hardening phase, once the API definitions are determined to be stable, the auto-generated\npackages are released:\n\nCreate release branches for auto-generated packages and publish as release candidates to public PyPI.\n\nCreate Pull Requests in idiomatic package repositories to update main to depend on the auto-generated\npackage release candidate releases. Ensure CI passes for idiomatic packages.\n\nPublish auto-generated packages as stable releases to public PyPI.\n\nCreate Pull Requests in idiomatic package repositories to update main to depend on the auto-generated\npackage stable releases. Ensure CI passes for idiomatic packages.\n\nCreate release branches for idiomatic packages and publish as release candidates to public PyPI.\n\nUpdate the PyGranta meta-package main branch to depend on the public idiomatic packages release candidates\nand auto-generated packages stable releases.\n\nAt this point release branches should be created for idiomatic packages. However, during hardening these release\nbranches still run CI against the development test VM.\n\nIdiomatic package release candidates must depend on stable release versions of auto-generated packages only.\nThey must not depend on pre-release versions of auto-generated packages.\n\nWhen performing pre-releases of packages with towncrier, the Ansys action creates a Pull Request to update\nCHANGELOG.md on main, and commits the CHANGELOG.md changes directly to the release branch. The commit to the\nrelease branch should be reverted, and the Pull Request to merge the changes to main should be closed and\nnot merged.\n\nThe stable auto-generated packages and release candidate idiomatic packages can now be used for the final release of\ninternal packages. It is recommended to make any closed-source idiomatic package release candidate dependencies\nflexible enough such that they match subsequent stable releases of those idiomatic packages.\n\nAt the end of this phase, the PyGranta meta-package depends on release candidates for the idiomatic packages and\nreleases of the auto-generated packages. This guarantees that there exists a consistent set of dependencies across all\nidiomatic packages and auto-generated packages. Any issues at this stage should be resolved by addressing any\ndependency conflicts in the idiomatic packages and publishing new release candidates to public PyPI as necessary."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#checklist","title":"Development and release processes > Checklist","text":"Checklist\n\n The development test VM is running an up-to-date development version of Granta MI.\n\n CI for all idiomatic packages is passing.\n\n Documentation for all idiomatic packages and the PyGranta meta-package has been reviewed to verify\nsignificant new content, changes in dependencies (for example Python version support, minimum Granta MI version), and\nreferences to other Ansys documentation sources.\n\n release branches have been created for auto-generated packages and idiomatic packages.\n\n Stable auto-generated packages are available on PyPI.\n\n Internal packages with runtime dependencies on auto-generated packages depend on the stable PyPI releases.\n\n Idiomatic packages depend on stable releases of auto-generated packages only.\n\n Release candidate idiomatic packages are available on PyPI.\n\n Internal packages with runtime dependencies on idiomatic packages depend on the release candidate PyPI\nreleases.\n\n The PyGranta meta-package main branch depends on idiomatic packages release candidates and\nauto-generated packages stable releases only."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-3-pre-release","title":"Development and release processes > Phase 3: Pre-release","text":"Phase 3: Pre-release\n\nProvision a new production test VM to run the Granta MI release validated during the hardening phase.\n\nUpdate the latest idiomatic package release branches created during the hardening phase to run CI against the\nnewly provisioned production test VM.\n\nUpdate the latest idiomatic package release branches created during the hardening phase to not run CI\nagainst the development test VM.\n\nManually test the PyGranta meta-package against the Granta MI release candidate by installing the main branch\ndirectly using pip.\n\nIf there have been significant changes to the PyGranta meta-package, a release candidate may optionally be\npublished to PyPI. Examples of significant changes include re-organization of the documentation and changes to the\nCI process, both of which are not checked as part of the manual test required in this phase.\n\nTesting should occur within 4 weeks following Phase 2. Any issues raised during testing should be immediately triaged\nand fixed or deferred.\n\nChecklist for completing this phase:\n\n There is a new production test VM provisioned and running the release version of Granta MI.\n\n All release branches no longer target the development test VM.\n\n CI for all idiomatic packages is passing.\n\n Manual testing has been completed against the PyGranta meta-package and all idiomatic packages.\n\n The GitHub PyGranta Development project contains no must-deliver features or bug fixes still outstanding for\nthe active release."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#phase-4-release","title":"Development and release processes > Phase 4: Release","text":"Phase 4: Release\n\nThe PyAnsys meta-package is typically released a week before Granta MI is available to customers. As a result, the\nstable versions of the packages should be released at least a week before Granta MI is available to customers:\n\nDefer any issues still associated with the active release in the GitHub PyGranta Development to a future release.\n\nPublish idiomatic packages as stable releases to public PyPI.\n\nUpdate the PyGranta meta-package main branch to depend on the public idiomatic packages stable releases.\n\nCreate (or update if a release candidate was published in Phase 3) a release branch for the PyGranta\nmeta-package.\n\nPublish the PyGranta meta-package as a stable release to public PyPI.\n\nCreate a Pull Request in the PyAnsys meta-package repository to move the PyGranta meta-package dependency to the\nnew stable release.\n\nIf any new idiomatic package releases are compatible with the previous release of Granta MI and PyGranta,\nincluding the minimum supported Python version, create a patch release of the previous PyGranta meta-package\nrelease which includes the new idiomatic package releases.\n\nChecklist for completing this phase:\n\n The active release in the GitHub PyGranta Development project is empty, with all deferred tickets re-assigned\nto a future release.\n\n Stable releases of all idiomatic packages and the PyGranta meta-package are available on PyPI.\n\n The PyAnsys meta-package depends on the PyGranta meta-package stable release.\n\n A patch release has been made for the previous PyGranta meta-package if there is at least one backwards-\ncompatible idiomatic package released during this development cycle."},{"objectID":"Development and release processes","href":"development_and_release_processes.html#addenda","title":"Development and release processes > Addenda","text":"Addenda"},{"objectID":"Development and release processes","href":"development_and_release_processes.html#test-vm-management","title":"Development and release processes > Test VM management","text":"Test VM management\n\nThere are multiple production test VMs in use at one time, and each runs a validated Granta MI version. The names and\nURLs of the production test VM are stored in the AZURE_VM_NAME_yyRn and TEST_SERVER_yyRn_URL secrets\nrespectively, where yyRn is the Granta MI version, for example 25R2.\n\nProduction test VMs are commissioned for a new Granta MI release once it is declared stable, and is decommissioned\nwhen support is withdrawn for that Granta MI release.\n\nThe development test VM runs a development build of Granta MI, and is upgraded as required to support CI on\nidiomatic package main branches during development. The name and URL of the development test VM are stored in\nthe AZURE_VM_NAME_DEV and TEST_SERVER_DEV_URL secrets respectively.\n\nThe development test VM has a green desktop background to indicate it is safe to upgrade.\n\nThis approach has the following advantages:\n\nCI is generally passing on all idiomatic package main branches at any point in development and release, which\nreflects successful CI run against all supported Granta MI releases and a recent Granta MI development build.\n\nAll PyGranta meta-package and idiomatic package released release branches can be patched and used for\nreleases if required. Changes in behavior from subsequent Granta MI development do not affect existing release\nbranches.\n\nIf a production test VM has been decommissioned, it should be removed from release branch CI if a patch\nrelease is required.\n\n"},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#pygranta-and-granta-mi-compatibility","title":"PyGranta and Granta MI compatibility","text":"PyGranta and Granta MI compatibility\n\nPyGranta packages have always been compatible with the Granta MI version they were delivered against (see\nversioning_system).\n\nStarting with PyGranta version 2025.2.0 (released with Granta MI 2025 R2), where possible, PyGranta packages are\nbackwards compatible with all supported Granta MI versions at the time of release. This allows access to improvements\nand bug fixes without having to upgrade Granta MI.\n\nFull backwards compatibility for all supported Granta MI versions is not always guaranteed. Check the README or\n“Getting Started” guide for the individual PyGranta package to confirm the minimum required Granta MI version and for\ninstallation instructions.\n\nIf the latest PyGranta package version does not support the required Granta MI version, use the Package versions table\nbelow to identify the version of the PyGranta package released with the required Granta MI version.\n\nIn addition, forwards compatibility of PyGranta packages with future Granta MI releases is not guaranteed. PyGranta\npackages should always be upgraded following a Granta MI server upgrade."},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#package-versions","title":"PyGranta and Granta MI compatibility > Package versions","text":"Package versions\n\nThese tables map a PyGranta metapackage version to the individual PyGranta package associated with it. This can be used\nto determine the minimum PyGranta package that is compatible with a given version of Granta MI. However, due to\nbackwards compatibility, it may be possible to use more modern package versions.\n\nThe ansys-grantami-bomanalytics and ansys-grantami-bomanalytics-openapi versions included in the metapackage\nare compatible with that version of BoM Analytics Services, included with Granta MI Restricted Substances and\nSustainability Reports. Multiple versions of BoM Analytics Services are compatible with a single version of Granta\nMI."},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#20252","title":"PyGranta and Granta MI compatibility > 2025.2","text":"2025.2\n\n\n\n\n\n\n\nLibrary\n\nVersion\n\nLinks\n\nansys-grantami-bomanalytics\n\n2.3.1\n\nPyPI, Documentation\n\nansys-grantami-bomanalytics-openapi\n\n4.0.0\n\nPyPI\n\nansys-grantami-recordlists\n\n2.0.1\n\nPyPI, Documentation\n\nansys-grantami-jobqueue\n\n1.2.0\n\nPyPI, Documentation\n\nansys-grantami-serverapi-openapi\n\n5.0.0\n\nPyPI\n\nansys-grantami-dataflow-extensions\n\n0.2.0\n\nPyPI, Documentation"},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#20251","title":"PyGranta and Granta MI compatibility > 2025.1","text":"2025.1\n\n\n\n\n\n\n\nLibrary\n\nVersion\n\nLinks\n\nansys-grantami-bomanalytics\n\n2.2.0\n\nPyPI, Documentation\n\nansys-grantami-bomanalytics-openapi\n\n3.1.0\n\nPyPI\n\nansys-grantami-recordlists\n\n1.3.0\n\nPyPI, Documentation\n\nansys-grantami-jobqueue\n\n1.1.0\n\nPyPI, Documentation\n\nansys-grantami-serverapi-openapi\n\n4.0.0\n\nPyPI"},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#20242","title":"PyGranta and Granta MI compatibility > 2024.2","text":"2024.2\n\n\n\n\n\n\n\nLibrary\n\nVersion\n\nLinks\n\nansys-grantami-bomanalytics\n\n2.1.1\n\nPyPI, Documentation\n\nansys-grantami-bomanalytics-openapi\n\n3.0.0\n\nPyPI\n\nansys-grantami-recordlists\n\n1.2.1\n\nPyPI, Documentation\n\nansys-grantami-jobqueue\n\n1.0.1\n\nPyPI, Documentation\n\nansys-grantami-serverapi-openapi\n\n3.0.0\n\nPyPI"},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#20241","title":"PyGranta and Granta MI compatibility > 2024.1","text":"2024.1\n\n\n\n\n\n\n\nLibrary\n\nVersion\n\nLinks\n\nansys-grantami-bomanalytics\n\n2.0.0\n\nPyPI, Documentation\n\nansys-grantami-bomanalytics-openapi\n\n2.0.0\n\nPyPI\n\nansys-grantami-recordlists\n\n1.1.0\n\nPyPI, Documentation\n\nansys-grantami-serverapi-openapi\n\n2.0.0\n\nPyPI"},{"objectID":"PyGranta and Granta MI compatibility","href":"package_versions.html#20232","title":"PyGranta and Granta MI compatibility > 2023.2","text":"2023.2\n\n\n\n\n\n\n\nLibrary\n\nVersion\n\nLinks\n\nansys-grantami-bomanalytics\n\n1.2.0\n\nPyPI, Documentation\n\nansys-grantami-bomanalytics-openapi\n\n1.1.0\n\nPyPI\n\nansys-grantami-recordlists\n\n1.0.0.post1\n\nPyPI, Documentation\n\nansys-grantami-serverapi-openapi\n\n1.0.0\n\nPyPI"},{"objectID":"Getting started","href":"getting_started.html#getting-started","title":"Getting started","text":"Getting started\n\nThe pygranta metapackage guarantees mutual compatibility between all the PyGranta packages in a specific version.\nThat is, the packages referenced by a pygranta metapackage version are certified to be compatible with each other\nand with the corresponding Granta MI version.\n\nThe ansys-grantami-bomanalytics and ansys-grantami-bomanalytics-openapi versions included in the metapackage\nare instead compatible with the corresponding version of BoM Analytics Services. BoM Analytics Services is the REST\nAPI used by ansys-grantami-bomanalytics, and is provided as part of the Granta MI Restricted Substances and\nSustainability Reports package. Multiple versions of the reports package are available for a single version of\nGranta MI.\n\nThe selected version of the reports package, and therefore the required version of ansys-grantami-bomanalytics,\ndepends on the Restricted Substances and Sustainability database version.\n\nRefer to the Restricted Substances and Sustainability Install and Configuration guide for more details on\nGranta MI Restricted Substances and Sustainability Reports versioning and installation.\n\nMost packages require access to an installation of Ansys Granta MI. For more information on getting a licensed copy of\nAnsys products, visit the Ansys website."},{"objectID":"Getting started","href":"getting_started.html#installing-the-latest-version","title":"Getting started > Installing the latest version","text":"Installing the latest version\n\nTo install the latest version of the pygranta metapackage, run:\n\nThis installs all the PyGranta packages certified to be compatible with the latest released version of Granta MI."},{"objectID":"Getting started","href":"getting_started.html#installing-packages-compatible-with-a-specific-version-of-granta-mi","title":"Getting started > Installing packages compatible with a specific version of Granta MI","text":"Installing packages compatible with a specific version of Granta MI\n\nTo install the version of the pygranta metapackage associated with a specific version of Granta MI, provide the\nversion number during installation. For example, to install the version associated with Granta MI 2023 R2, specify the\npygranta metapackage version 2023.2.0:\n\nMore detailed guidance on selecting package versions which are compatible with specific Granta MI versions is available\non the package_versions page. This page also includes a list of all PyGranta packages associated with each\npygranta metapackage version.\n\nSee Versioning system for more details on PyGranta package version numbers."},{"objectID":"Getting started","href":"getting_started.html#user-mode-installation","title":"Getting started > User mode installation","text":"User mode installation\n\nBefore installing the pygranta metapackage in user mode, ensure that you have the\nlatest version of pip by running this command:\n\nThen, install the pygranta metapackage with this command:\n\nIf you are interested in installing a specific version, such as 2023.2.0, you\ncan run a command like this one:"},{"objectID":"Getting started","href":"getting_started.html#offline-installation","title":"Getting started > Offline installation","text":"Offline installation\n\nIf you lack an internet connection on your installation machine, the\nrecommended way of installing the pygranta metapackage is downloading the\nwheelhouse archive for your corresponding machine\narchitecture from the repository’s Releases page.\n\nEach wheelhouse archive contains all the Python wheels necessary to install\nthe pygranta metapackage from scratch on Windows and Linux for all supported\nPython versions. You can install this on an isolated system with a fresh Python\ninstallation or on a virtual environment.\n\nFor example, on Linux with Python 3.12, unzip the wheelhouse archive and install\nit with these commands:\n\nIf you’re on Windows with Python 3.12, unzip to a wheelhouse directory and install\nusing the same command as for Linux.\n\nConsider installing using a virtual environment.\n\n"},{"objectID":"Getting started","href":"getting_started.html#versioning-system","title":"Getting started > Versioning system","text":"Versioning system\n\nThe pygranta metapackage follows a semantic-like versioning system, though\nit has been adapted to the Ansys product release mechanism. In this sense, the\nfollowing versioning system is followed:\n\nWhere:\n\nXXXX is the Ansys product release year (for example, 2024).\n\nY is the Ansys product release within the same year (for example, 1,\nwhich relates to R1).\n\nZZ is the patched versions to the pygranta metapackage, if any.\n\nConsequently, the first pygranta metapackage compatible with the 2024 R1\nrelease would be:\n\nAny subsequent patched version of this package would have these versions:\n\nWhen using pip to install your package, you can install a specific version with a\ncommand like this:"},{"objectID":"Home","href":"index.html#pygranta-202610dev0","title":"PyGranta 2026.1.0.dev0","text":"PyGranta 2026.1.0.dev0\n\nWelcome to the PyGranta project. This page lists the PyAnsys packages\nthat provide integration with Granta MI services.\n\n\n\nPyGranta BoM Analytics  \n\nSustainability and restricted substance analysis.\n\nhttps://bomanalytics.grantami.docs.pyansys.com/\n\nPyGranta RecordLists \n\nManage favorite Granta MI materials in Python as record lists.\n\nhttps://recordlists.grantami.docs.pyansys.com/\n\nPyGranta JobQueue \n\nImport and export text and Excel data with Python asynchronously.\n\nhttps://jobqueue.grantami.docs.pyansys.com/\n\nPyGranta Data Flow Extensions \n\nInteroperability between Granta MI Data Flow and Python.\n\nhttps://dataflow-extensions.grantami.docs.pyansys.com/"},{"objectID":"Examples","href":"examples.html#examples","title":"Examples","text":"Examples\n\nEach PyGranta package has its own set of example scripts, provided as Jupyter notebooks."},{"objectID":"Examples","href":"examples.html#pygranta-examples","title":"Examples > PyGranta examples","text":"PyGranta examples\n\nPyGranta BoM Analytics  \n\nhttps://bomanalytics.grantami.docs.pyansys.com/version/stable/examples/index.html\n\nPyGranta RecordLists \n\nhttps://recordlists.grantami.docs.pyansys.com/version/stable/examples/index.html\n\nPyGranta JobQueue \n\nhttps://jobqueue.grantami.docs.pyansys.com/version/stable/examples/index.html\n\nPyGranta Data Flow Extensions \n\nhttps://dataflow-extensions.grantami.docs.pyansys.com/version/stable/examples/index.html"}]