Development and release processes
=================================

Definitions
-----------

* *PyGranta meta-package*: A package which depends on the *idiomatic* packages and *auto-generated packages*. Includes
  documentation describing the PyGranta ecosystem, including this document.
* *Idiomatic package*: A hand-written package. Typically depends on one *auto-generated package* and ``openapi-common``.
  There are currently three *idiomatic packages* in PyGranta:

  * ``ansys-grantami-bomanalytics``
  * ``ansys-grantami-recordlists``
  * ``ansys-grantami-jobqueue``

* *Auto-generated package*: A package generated by the *codegen template*. There are currently two *auto-generated*
  packages in PyGranta:

  * ``ansys-grantami-bomanalytics-openapi``
  * ``ansys-grantami-serverapi-openapi``

* *Codegen template*: The template used to generate the *auto-generated packages*.
* *Production test VM*: Virtual machine used for CI integration tests and for executing notebooks as part of the
  documentation build. This machine always runs the Granta MI version required to build the most recently-released
  ``release`` branch for the *PyGranta meta-package* and all *idiomatic packages*.
* *Development test VM*: Virtual machine used for CI integration tests and for executing notebooks as part of the
  documentation build. This machine is upgraded as required to support CI on *idiomatic package* ``main`` branches
  during development.

Development and release timeline
--------------------------------

The timeline is split into three distinct phases:

1. Phase 1: Development. There is active development upstream on closed-source Granta MI components, the *codegen
   template*, and on the open-source *idiomatic packages* and *auto-generated packages*. Effort is made to ensure CI is
   passing on all ``main`` branches, but from time to time CI may fail. The *development test VM* is upgraded as
   required to support CI passing on ``main`` branches.
2. Phase 2: Hardening. Bugs are fixed and minor improvements are made to *idiomatic packages*, *auto-generated
   packages*, and the *codegen template*. During this phase the *codegen template* and *auto-generated packages* are
   finalized.
3. Phase 3: Pre-release. The upstream closed-source development has completed. The *PyGranta meta-package* and
   *idiomatic packages* are manually tested and finalized.

Phase 1: Development
~~~~~~~~~~~~~~~~~~~~

During development, the following processes happen continuously:

1. Incorporate changes to upstream API definitions into *auto-generated package* repositories.
2. Check that code generation is successful by monitoring CI in the *auto-generated package* repositories.
3. If code generation is not successful, resolve by either fixing the *codegen template*, fixing the *auto-generated
   package* configuration, or raise the issue with the internal Ansys development team.

If *idiomatic package* development does not depend on upstream API development, then there is no dependency between
the *idiomatic package* and the *auto-generated package* and work can proceed in parallel.

If significant *idiomatic package* development is being done that depends on the current state of an *auto-generated
package*, you should update the ``main`` branch of the corresponding *idiomatic package* to depend on the
*auto-generated package* ``main`` directly.

During this phase, the *development test VM* may be upgraded if required to support new upstream Granta MI
functionality.

Phase 2: Hardening
~~~~~~~~~~~~~~~~~~

#. Update the *development test VM* with the latest Granta MI software and databases. See the
   ``ansys-grantami-bomanalytics`` repository for details about preparing the Restricted Substances test database.
#. Publish *auto-generated packages* to the internal PyPI mirror with ``.dev`` version numbers.
#. Update *idiomatic package* ``main`` branches to depend on the *auto-generated package* dev releases. If the ``main``
   branch has not been updated to depend on the *auto-generated package* ``main`` branch during development, then there
   may be integration issues discovered at this point - these should be resolved in the PR before merging. The PR
   typically includes:

   * Updates to the ``README.rst`` to reflect any changes in the minimum required Granta MI version.
   * Changes at the interface with the *auto-generated package* if either the *codegen template* or API definition has
     changed.
   * Changes to expected test results. This is typically relevant for ``ansys-grantami-bomanalytics`` which includes
     acceptance-style tests.
#. Publish *idiomatic packages* to the internal PyPI mirror with ``.dev`` version numbers.

   .. note::
      At this point release branches should **not** be created. ``.dev`` releases should be published to the internal
      PyPI mirror from the ``main`` branch.

   .. note::
      These ``.dev`` releases can be used for internal testing of closed-source packages that have runtime
      dependencies on PyGranta packages.

#. Continue to review any changes to API definitions via *auto-generated packages* throughout the hardening phase. If
   there are any issues with the API definitions, these must be escalated with high priority.

Towards the end of the hardening phase, once the API definitions are determined to be stable, the *auto-generated
packages* are released:

#. Create ``release`` branches for *auto-generated packages* and publish as release candidates to public PyPI.
#. Create Pull Requests in *idiomatic package* repositories to update ``main`` to depend on the *auto-generated
   package* release candidate releases. Ensure CI passes for *idiomatic packages*.
#. Publish *auto-generated packages* as stable releases to public PyPI.
#. Create Pull Requests in *idiomatic package* repositories to update ``main`` to depend on the *auto-generated
   package* stable releases. Ensure CI passes for *idiomatic packages*.
#. Create ``release`` branches for *idiomatic packages* and publish as release candidates to public PyPI.

   .. note::
      At this point release branches should be created for *idiomatic packages*. However, during hardening these release
      branches still run CI against the *development test VM*.

   .. note::
      *Idiomatic package* release candidates must depend on full release versions of autogenerated packages only. They
      must not depend on pre-release versions of autogenerated packages.

   .. note::
      When performing pre-releases of packages with towncrier, the Ansys action creates a Pull Request to update
      CHANGELOG.md on ``main``, and commits the CHANGELOG.md changes directly to the release branch. The commit to the
      release branch should be reverted, and the Pull Request to merge the changes to ``main`` should be closed and
      not merged.

The stable *auto-generated packages* and release candidate *idiomatic packages* can now be used for the final release of
internal packages. It is recommended to make any closed-source *idiomatic package* release candidate dependencies
flexible enough such that they match subsequent stable releases of those *idiomatic packages*.

Phase 3: Pre-release
~~~~~~~~~~~~~~~~~~~~

#. Update the *production test VM* to run the Granta MI release validated during the hardening phase above.
#. Update the latest *idiomatic package* ``release`` branches created during the hardening phase to run CI against the
   *production test VM*.
#. Update the *PyGranta meta-package* ``main`` branch to depend on the public *idiomatic packages* release candidates
   and *auto-generated packages* stable releases.
#. Create a ``release`` branch for the *PyGranta meta-package* and publish as a release candidate to public PyPI.
#. Create a Pull Request in the PyAnsys meta-package repository to move the PyGranta dependency to the release candidate
   published above.
#. Manually test the *PyGranta meta-package* release candidate against the Granta MI release candidate.

Testing should occur up to a week before the availability of Granta MI to customers. After this point, the PyGranta
packages are released:

#. Publish *idiomatic packages* as stable releases to public PyPI.
#. Update the *PyGranta meta-package* ``main`` branch to depend on the public *idiomatic packages* stable releases.
#. Cherry-pick the changes above to the ``release`` branch.
#. Publish the *PyGranta meta-package* as a stable release to public PyPI.
#. Create a Pull Request in the PyAnsys meta-package repository to move the PyGranta dependency to the stable release
   published above.
#. If any new *idiomatic package* releases are compatible with the previous release of Granta MI, create a patch release
   of the previous *PyGranta meta-package* release.


Addenda
-------

Test VM management
~~~~~~~~~~~~~~~~~~

At all times the *production test VM* virtual machine should be running the latest validated Granta MI version. This
is generally the most recent released version, but during the `pre-release <Phase 3: Pre-release>`_ phase the version of
Granta MI installed on the *production test VM* is more recent than the latest version available to customers.

The *development test VM* runs whichever version of Granta MI is required to support CI on *idiomatic package* ``main``
branches during development.

This approach achieves two goals:

* CI is generally passing on all *idiomatic package* ``main`` branches at any point in development and release.
* The most recent *PyGranta meta-package* and all *idiomatic package* **released** ``release`` branches can still be
  built up to the `pre-release <Phase 3: Pre-release>`_ phase to support patch releases if required.
