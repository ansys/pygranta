name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: pygranta
  PACKAGE_NAMESPACE: pygranta
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: "grantami.docs.pyansys.com"

jobs:

  check-licenses:
    name: Check depencencies' licenses
    runs-on: ubuntu-latest
    steps:
      - name: PyGranta Licenses Check
        uses: ansys/actions/check-licenses@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          target: "all"

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyGranta documentation style checks
        uses: ansys/actions/doc-style@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests-core:
    name: Build core PyGranta packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install core PyGranta packages
        run: |
          pip install .

      - name: Smoke test
        run: python -c "from ${{ env.PACKAGE_NAMESPACE }} import __version__; print(__version__)"

  wheelhouse-all:
    name: Build PyGranta package wheelhouse
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests-core]
    permissions:
      id-token: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python-version }}
          attest-provenance: true

      - name: List dependencies (pip freeze)
        run: |
          pip freeze > all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt
          cat all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt

      - name: Upload dependencies list
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4  # v5.0.0
        with:
          name: all-deps-${{ runner.os }}-${{ matrix.python-version }}
          path: all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt
          retention-days: 7

  docs-build:
    name: Building Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]

    steps:
      - name: Build documentation
        uses: ansys/actions/doc-build@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          sphinxopts: "-j auto -W --keep-going -n -t list_packages"
          group-dependencies-name: "doc"
          optional-dependencies-name: ""

  package:
    name: Package library
    runs-on: ubuntu-latest
    needs: [docs-build, smoke-tests-core]
    permissions:
      id-token: write
      attestations: write
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          attest-provenance: true

  doc-deploy-dev:
    name: "Deploy development docs"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ package ]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  release:
   name: Release project
   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
   needs: [package, wheelhouse-all]
   environment: release
   permissions:
     id-token: write
     contents: write
   runs-on: ubuntu-latest
   steps:
     - name: Release to GitHub
       uses: ansys/actions/release-github@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
       with:
         library-name: ${{ env.PACKAGE_NAME }}
         additional-artifacts: 'all-deps-Linux-3.10 all-deps-Linux-3.11 all-deps-Linux-3.12 all-deps-Linux-3.13 all-deps-Windows-3.10 all-deps-Windows-3.11 all-deps-Windows-3.12 all-deps-Windows-3.13'
         token: ${{ secrets.GITHUB_TOKEN }}

     - name: "Download the library artifacts"
       uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53  # v6.0.0
       with:
         name: ${{ env.PACKAGE_NAME }}-artifacts
         path: ${{ env.PACKAGE_NAME }}-artifacts

     - name: "Upload artifacts to PyPI using trusted publisher"
       uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e  # v1.13.0
       with:
         repository-url: "https://upload.pypi.org/legacy/"
         print-hash: true
         packages-dir: ${{ env.PACKAGE_NAME }}-artifacts
         skip-existing: false

  docs-release:
   name: Deploy release docs
   runs-on: ubuntu-latest
   needs: [release]
   steps:
     - name: Deploy the latest release documentation
       uses: ansys/actions/doc-deploy-stable@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
       with:
         cname: ${{ env.DOCUMENTATION_CNAME }}
         token: ${{ secrets.GITHUB_TOKEN }}
         bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
         bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
