name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: pygranta
  PACKAGE_NAMESPACE: pygranta
  MAIN_PYTHON_VERSION: '3.11'
  DOCUMENTATION_CNAME: "legendary-giggle-yr2yylw.pages.github.io"

jobs:

  check-licenses:
    name: Check depencencies' licenses
    runs-on: ubuntu-latest
    steps:
      - name: PyGranta Licenses Check
        uses: ansys/actions/check-licenses@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          target: "all"

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyGranta documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests-core:
    name: Build core PyGranta packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install core PyGranta packages
        run: |
          pip install .

      - name: Smoke test
        run: python -c "from ${{ env.PACKAGE_NAMESPACE }} import __version__; print(__version__)"

  wheelhouse-all:
    name: Build PyGranta package wheelhouse
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests-core]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python-version }}
          target: "all"

      - name: List dependencies (pip freeze)
        run: |
          pip freeze > all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt
          cat all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt

      - name: Upload dependencies list
        uses: actions/upload-artifact@v3
        with:
          name: all-deps-${{ runner.os }}-${{ matrix.python-version }}
          path: all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt
          retention-days: 7

  docs-build:
    name: Building Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]

    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install Python dependencies"
        run: |
          python -m pip install poetry
          poetry install --with doc

      - name: "Build HTML documentation"
        run: |
          poetry run -- make -C doc html SPHINXOPTS="-j auto -W --keep-going"

      - name: "Upload HTML documentation artifact"
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v4
        if: github.ref == 'refs/heads/main'
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  package:
    name: Package library
    runs-on: ubuntu-latest
    needs: [docs-build, smoke-tests-core]
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
   name: Release project
   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
   needs: [package, wheelhouse-all]
   runs-on: ubuntu-latest
   steps:
     - name: Release to GitHub
       uses: ansys/actions/release-github@v4
       with:
         library-name: ${{ env.PACKAGE_NAME }}
         additional-artifacts: 'all-deps-Linux-3.8 all-deps-Linux-3.9 all-deps-Linux-3.10 all-deps-Linux-3.11 all-deps-Windows-3.8 all-deps-Windows-3.9 all-deps-Windows-3.10 all-deps-Windows-3.11'

#     - name: Release to PyPI repository
#       uses: ansys/actions/release-pypi-public@v4
#       with:
#         library-name: ${{ env.PACKAGE_NAME }}
#         twine-username: __token__
#         twine-token: ${{ secrets.PYPI_TOKEN }}

  docs-release:
   name: Deploy release docs
   runs-on: ubuntu-latest
   needs: [release]
   steps:
     - name: Deploy the latest release documentation
       uses: ansys/actions/doc-deploy-stable@v4
       with:
         cname: ${{ env.DOCUMENTATION_CNAME }}
         token: ${{ secrets.GITHUB_TOKEN }}